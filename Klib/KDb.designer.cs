#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Klib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="KDb")]
	public partial class KDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAWSInfo(AWSInfo instance);
    partial void UpdateAWSInfo(AWSInfo instance);
    partial void DeleteAWSInfo(AWSInfo instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookMapper(BookMapper instance);
    partial void UpdateBookMapper(BookMapper instance);
    partial void DeleteBookMapper(BookMapper instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertRelationshipMapper(RelationshipMapper instance);
    partial void UpdateRelationshipMapper(RelationshipMapper instance);
    partial void DeleteRelationshipMapper(RelationshipMapper instance);
    #endregion
		
		public KDbDataContext() : 
				base(global::Klib.Properties.Settings.Default.KDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AWSInfo> AWSInfos
		{
			get
			{
				return this.GetTable<AWSInfo>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookMapper> BookMappers
		{
			get
			{
				return this.GetTable<BookMapper>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<RelationshipMapper> RelationshipMappers
		{
			get
			{
				return this.GetTable<RelationshipMapper>();
			}
		}
	}
	
	[Table(Name="dbo.AWSInfo")]
	public partial class AWSInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _Title;
		
		private string _Author;
		
		private string _ISBN10;
		
		private string _ISBN13;
		
		private string _URL;
		
		private EntityRef<BookMapper> _BookMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnISBN10Changing(string value);
    partial void OnISBN10Changed();
    partial void OnISBN13Changing(string value);
    partial void OnISBN13Changed();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public AWSInfo()
		{
			this._BookMapper = default(EntityRef<BookMapper>);
			OnCreated();
		}
		
		[Column(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_ISBN10", DbType="NChar(10)")]
		public string ISBN10
		{
			get
			{
				return this._ISBN10;
			}
			set
			{
				if ((this._ISBN10 != value))
				{
					this.OnISBN10Changing(value);
					this.SendPropertyChanging();
					this._ISBN10 = value;
					this.SendPropertyChanged("ISBN10");
					this.OnISBN10Changed();
				}
			}
		}
		
		[Column(Storage="_ISBN13", DbType="NChar(13)")]
		public string ISBN13
		{
			get
			{
				return this._ISBN13;
			}
			set
			{
				if ((this._ISBN13 != value))
				{
					this.OnISBN13Changing(value);
					this.SendPropertyChanging();
					this._ISBN13 = value;
					this.SendPropertyChanged("ISBN13");
					this.OnISBN13Changed();
				}
			}
		}
		
		[Column(Storage="_URL", DbType="NChar(256) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[Association(Name="AWSInfo_BookMapper", Storage="_BookMapper", ThisKey="UID", OtherKey="UID", IsUnique=true, IsForeignKey=false)]
		public BookMapper BookMapper
		{
			get
			{
				return this._BookMapper.Entity;
			}
			set
			{
				BookMapper previousValue = this._BookMapper.Entity;
				if (((previousValue != value) 
							|| (this._BookMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookMapper.Entity = null;
						previousValue.AWSInfo1 = null;
					}
					this._BookMapper.Entity = value;
					if ((value != null))
					{
						value.AWSInfo1 = this;
					}
					this.SendPropertyChanged("BookMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _Title;
		
		private string _Author;
		
		private int _Owner;
		
		private string _ISBN10;
		
		private string _ISBN13;
		
		private bool _UniqueMap;
		
		private EntityRef<BookMapper> _BookMapper;
		
		private EntitySet<RelationshipMapper> _RelationshipMappers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnOwnerChanging(int value);
    partial void OnOwnerChanged();
    partial void OnISBN10Changing(string value);
    partial void OnISBN10Changed();
    partial void OnISBN13Changing(string value);
    partial void OnISBN13Changed();
    partial void OnUniqueMapChanging(bool value);
    partial void OnUniqueMapChanged();
    #endregion
		
		public Book()
		{
			this._BookMapper = default(EntityRef<BookMapper>);
			this._RelationshipMappers = new EntitySet<RelationshipMapper>(new Action<RelationshipMapper>(this.attach_RelationshipMappers), new Action<RelationshipMapper>(this.detach_RelationshipMappers));
			OnCreated();
		}
		
		[Column(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Author", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="Int NOT NULL")]
		public int Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_ISBN10", DbType="NChar(10)")]
		public string ISBN10
		{
			get
			{
				return this._ISBN10;
			}
			set
			{
				if ((this._ISBN10 != value))
				{
					this.OnISBN10Changing(value);
					this.SendPropertyChanging();
					this._ISBN10 = value;
					this.SendPropertyChanged("ISBN10");
					this.OnISBN10Changed();
				}
			}
		}
		
		[Column(Storage="_ISBN13", DbType="NChar(13)")]
		public string ISBN13
		{
			get
			{
				return this._ISBN13;
			}
			set
			{
				if ((this._ISBN13 != value))
				{
					this.OnISBN13Changing(value);
					this.SendPropertyChanging();
					this._ISBN13 = value;
					this.SendPropertyChanged("ISBN13");
					this.OnISBN13Changed();
				}
			}
		}
		
		[Column(Storage="_UniqueMap", DbType="Bit NOT NULL")]
		public bool UniqueMap
		{
			get
			{
				return this._UniqueMap;
			}
			set
			{
				if ((this._UniqueMap != value))
				{
					this.OnUniqueMapChanging(value);
					this.SendPropertyChanging();
					this._UniqueMap = value;
					this.SendPropertyChanged("UniqueMap");
					this.OnUniqueMapChanged();
				}
			}
		}
		
		[Association(Name="Book_BookMapper", Storage="_BookMapper", ThisKey="UID", OtherKey="UID", IsUnique=true, IsForeignKey=false)]
		public BookMapper BookMapper
		{
			get
			{
				return this._BookMapper.Entity;
			}
			set
			{
				BookMapper previousValue = this._BookMapper.Entity;
				if (((previousValue != value) 
							|| (this._BookMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookMapper.Entity = null;
						previousValue.Book1 = null;
					}
					this._BookMapper.Entity = value;
					if ((value != null))
					{
						value.Book1 = this;
					}
					this.SendPropertyChanged("BookMapper");
				}
			}
		}
		
		[Association(Name="Book_RelationshipMapper", Storage="_RelationshipMappers", ThisKey="UID", OtherKey="Resource")]
		public EntitySet<RelationshipMapper> RelationshipMappers
		{
			get
			{
				return this._RelationshipMappers;
			}
			set
			{
				this._RelationshipMappers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelationshipMappers(RelationshipMapper entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_RelationshipMappers(RelationshipMapper entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[Table(Name="dbo.BookMapper")]
	public partial class BookMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _Book;
		
		private int _AWSInfo;
		
		private EntityRef<AWSInfo> _AWSInfo1;
		
		private EntityRef<Book> _Book1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnBookChanging(int value);
    partial void OnBookChanged();
    partial void OnAWSInfoChanging(int value);
    partial void OnAWSInfoChanged();
    #endregion
		
		public BookMapper()
		{
			this._AWSInfo1 = default(EntityRef<AWSInfo>);
			this._Book1 = default(EntityRef<Book>);
			OnCreated();
		}
		
		[Column(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._AWSInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Book", DbType="Int NOT NULL")]
		public int Book
		{
			get
			{
				return this._Book;
			}
			set
			{
				if ((this._Book != value))
				{
					this.OnBookChanging(value);
					this.SendPropertyChanging();
					this._Book = value;
					this.SendPropertyChanged("Book");
					this.OnBookChanged();
				}
			}
		}
		
		[Column(Storage="_AWSInfo", DbType="Int NOT NULL")]
		public int AWSInfo
		{
			get
			{
				return this._AWSInfo;
			}
			set
			{
				if ((this._AWSInfo != value))
				{
					this.OnAWSInfoChanging(value);
					this.SendPropertyChanging();
					this._AWSInfo = value;
					this.SendPropertyChanged("AWSInfo");
					this.OnAWSInfoChanged();
				}
			}
		}
		
		[Association(Name="AWSInfo_BookMapper", Storage="_AWSInfo1", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public AWSInfo AWSInfo1
		{
			get
			{
				return this._AWSInfo1.Entity;
			}
			set
			{
				AWSInfo previousValue = this._AWSInfo1.Entity;
				if (((previousValue != value) 
							|| (this._AWSInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AWSInfo1.Entity = null;
						previousValue.BookMapper = null;
					}
					this._AWSInfo1.Entity = value;
					if ((value != null))
					{
						value.BookMapper = this;
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("AWSInfo1");
				}
			}
		}
		
		[Association(Name="Book_BookMapper", Storage="_Book1", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Book Book1
		{
			get
			{
				return this._Book1.Entity;
			}
			set
			{
				Book previousValue = this._Book1.Entity;
				if (((previousValue != value) 
							|| (this._Book1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book1.Entity = null;
						previousValue.BookMapper = null;
					}
					this._Book1.Entity = value;
					if ((value != null))
					{
						value.BookMapper = this;
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Book1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Location;
		
		private EntitySet<RelationshipMapper> _RelationshipMappers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public Person()
		{
			this._RelationshipMappers = new EntitySet<RelationshipMapper>(new Action<RelationshipMapper>(this.attach_RelationshipMappers), new Action<RelationshipMapper>(this.detach_RelationshipMappers));
			OnCreated();
		}
		
		[Column(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Association(Name="Person_RelationshipMapper", Storage="_RelationshipMappers", ThisKey="UID", OtherKey="Person")]
		public EntitySet<RelationshipMapper> RelationshipMappers
		{
			get
			{
				return this._RelationshipMappers;
			}
			set
			{
				this._RelationshipMappers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelationshipMappers(RelationshipMapper entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = this;
		}
		
		private void detach_RelationshipMappers(RelationshipMapper entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = null;
		}
	}
	
	[Table(Name="dbo.RelationshipMapper")]
	public partial class RelationshipMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _Person;
		
		private int _Resource;
		
		private string _Type;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Person> _Person1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnPersonChanging(int value);
    partial void OnPersonChanged();
    partial void OnResourceChanging(int value);
    partial void OnResourceChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public RelationshipMapper()
		{
			this._Book = default(EntityRef<Book>);
			this._Person1 = default(EntityRef<Person>);
			OnCreated();
		}
		
		[Column(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Person", DbType="Int NOT NULL")]
		public int Person
		{
			get
			{
				return this._Person;
			}
			set
			{
				if ((this._Person != value))
				{
					if (this._Person1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonChanging(value);
					this.SendPropertyChanging();
					this._Person = value;
					this.SendPropertyChanged("Person");
					this.OnPersonChanged();
				}
			}
		}
		
		[Column(Storage="_Resource", DbType="Int NOT NULL")]
		public int Resource
		{
			get
			{
				return this._Resource;
			}
			set
			{
				if ((this._Resource != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceChanging(value);
					this.SendPropertyChanging();
					this._Resource = value;
					this.SendPropertyChanged("Resource");
					this.OnResourceChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Book_RelationshipMapper", Storage="_Book", ThisKey="Resource", OtherKey="UID", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.RelationshipMappers.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.RelationshipMappers.Add(this);
						this._Resource = value.UID;
					}
					else
					{
						this._Resource = default(int);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[Association(Name="Person_RelationshipMapper", Storage="_Person1", ThisKey="Person", OtherKey="UID", IsForeignKey=true)]
		public Person Person1
		{
			get
			{
				return this._Person1.Entity;
			}
			set
			{
				Person previousValue = this._Person1.Entity;
				if (((previousValue != value) 
							|| (this._Person1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person1.Entity = null;
						previousValue.RelationshipMappers.Remove(this);
					}
					this._Person1.Entity = value;
					if ((value != null))
					{
						value.RelationshipMappers.Add(this);
						this._Person = value.UID;
					}
					else
					{
						this._Person = default(int);
					}
					this.SendPropertyChanged("Person1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
